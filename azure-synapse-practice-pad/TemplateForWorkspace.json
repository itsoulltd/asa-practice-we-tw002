{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "azure-synapse-practice-pad"
		},
		"asa-practice-we-tw002-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'asa-practice-we-tw002-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:asa-practice-we-tw002.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"azure-synapse-practice-pad-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'azure-synapse-practice-pad-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:azure-synapse-practice-pad.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"GetAllManufacturersRestService_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://vpic.nhtsa.dot.gov"
		},
		"asa-practice-we-tw002-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asapractice01tw002.dfs.core.windows.net"
		},
		"azure-synapse-practice-pad-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsepracticepad.dfs.core.windows.net"
		},
		"Csv_Blob_Create_Event_properties_File_Ingestion_Orchestrator_parameters_ContainerName": {
			"type": "string",
			"defaultValue": "@trigger().outputs.body.folderPath"
		},
		"Csv_Blob_Create_Event_properties_File_Ingestion_Orchestrator_parameters_Filename": {
			"type": "string",
			"defaultValue": "@trigger().outputs.body.fileName"
		},
		"Csv_Blob_Create_Event_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/4a5fc6aa-bb98-45a3-bb67-341057206b2a/resourceGroups/AzureSynapse_PracticePad/providers/Microsoft.Storage/storageAccounts/synapsepracticepad"
		},
		"Example_Scheduler_Trigger_properties_PL_Test_Read_Metadata_parameters_Container": {
			"type": "string",
			"defaultValue": " metadata "
		},
		"Example_Scheduler_Trigger_properties_PL_Test_Read_Metadata_parameters_Directory": {
			"type": "string",
			"defaultValue": " "
		},
		"Example_Scheduler_Trigger_properties_PL_Test_Read_Metadata_parameters_Filename": {
			"type": "string",
			"defaultValue": "Json_Metadata.json"
		},
		"Excel_Blob_Create_Event_properties_File_Ingestion_Orchestrator_parameters_ContainerName": {
			"type": "string",
			"defaultValue": "@trigger().outputs.body.folderPath"
		},
		"Excel_Blob_Create_Event_properties_File_Ingestion_Orchestrator_parameters_Filename": {
			"type": "string",
			"defaultValue": "@trigger().outputs.body.fileName"
		},
		"Excel_Blob_Create_Event_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/4a5fc6aa-bb98-45a3-bb67-341057206b2a/resourceGroups/AzureSynapse_PracticePad/providers/Microsoft.Storage/storageAccounts/synapsepracticepad"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_YellowTexi_Data')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy YellowTexi Data To Rendered Dir",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "asa_adls_SourceData_YellowTrip",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "asa_adls_RenderedData_YellowTrip",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "others"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:12:06Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/asa_adls_SourceData_YellowTrip')]",
				"[concat(variables('workspaceId'), '/datasets/asa_adls_RenderedData_YellowTrip')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/File_Ingestion_Orchestrator')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Metadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Metadata_DS",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": "metadata",
									"Filename": "Metadata_File_v2.csv"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filtered Metadata Row",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Metadata').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().FileName, pipeline().parameters.Filename)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Switch- Based On Type",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Filtered Metadata Row",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@toUpper(\n    concat(activity('Filtered Metadata Row').output.value[0].FileType\n        , '_to_'\n        , 'parquet'\n    )\n)",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "CSV_TO_PARQUET",
									"activities": [
										{
											"name": "Copy From Bronze- Csv To Parquet",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "DS_ADLS_Csv",
													"type": "DatasetReference",
													"parameters": {
														"Container": {
															"value": "@activity('Filtered Metadata Row').output.value[0].InputContainer",
															"type": "Expression"
														},
														"Filename": {
															"value": "@activity('Filtered Metadata Row').output.value[0].FileName",
															"type": "Expression"
														},
														"Delimiter": {
															"value": "@activity('Filtered Metadata Row').output.value[0].Delimiter",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "DS_ADLS_Parquet",
													"type": "DatasetReference",
													"parameters": {
														"Container": {
															"value": "@activity('Filtered Metadata Row').output.value[0].TargetContainer",
															"type": "Expression"
														},
														"Directory": {
															"value": "@concat(activity('Filtered Metadata Row').output.value[0].BronzeFolder\n    , '/'\n    , activity('Filtered Metadata Row').output.value[0].Source\n    , '/'\n    , replace(activity('Filtered Metadata Row').output.value[0].FileName\n        , concat('.', activity('Filtered Metadata Row').output.value[0].FileType)\n        , ''\n    )\n)",
															"type": "Expression"
														},
														"Filename": {
															"value": "@concat(\n    replace(activity('Filtered Metadata Row').output.value[0].FileName\n        , activity('Filtered Metadata Row').output.value[0].FileType\n        , ''\n    )\n    , 'parquet'\n)",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "XLSX_TO_PARQUET",
									"activities": [
										{
											"name": "Copy From Bronze- Excel To Parquet",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "ExcelSource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "DS_ADLS_Excel",
													"type": "DatasetReference",
													"parameters": {
														"Container": {
															"value": "@activity('Filtered Metadata Row').output.value[0].InputContainer",
															"type": "Expression"
														},
														"Filename": {
															"value": "@activity('Filtered Metadata Row').output.value[0].FileName",
															"type": "Expression"
														},
														"SheetIndex": {
															"value": "@activity('Filtered Metadata Row').output.value[0].SheetIndex",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "DS_ADLS_Parquet",
													"type": "DatasetReference",
													"parameters": {
														"Container": {
															"value": "@activity('Filtered Metadata Row').output.value[0].TargetContainer",
															"type": "Expression"
														},
														"Directory": {
															"value": "@concat(activity('Filtered Metadata Row').output.value[0].BronzeFolder\n    , '/'\n    , activity('Filtered Metadata Row').output.value[0].Source\n    , '/'\n    , replace(activity('Filtered Metadata Row').output.value[0].FileName\n        , concat('.', activity('Filtered Metadata Row').output.value[0].FileType)\n        , ''\n    )\n)",
															"type": "Expression"
														},
														"Filename": {
															"value": "@concat(\n    replace(activity('Filtered Metadata Row').output.value[0].FileName\n        , activity('Filtered Metadata Row').output.value[0].FileType\n        , ''\n    )\n    , 'parquet'\n)",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					},
					{
						"name": "Archive Copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Switch- Based On Type",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_ADLS_DropIn_Archieve",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": {
										"value": "@pipeline().parameters.ContainerName",
										"type": "Expression"
									},
									"Filename": {
										"value": "@pipeline().parameters.Filename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_DropIn_Archieve",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": {
										"value": "@concat(activity('Filtered Metadata Row').output.Value[0].ArchiveContainer\n    , '/'\n    , activity('Filtered Metadata Row').output.Value[0].BronzeFolder\n    , '/'\n    , activity('Filtered Metadata Row').output.Value[0].Source\n)",
										"type": "Expression"
									},
									"Filename": {
										"value": "@concat(\n    replace(pipeline().parameters.Filename\n        , activity('Filtered Metadata Row').output.Value[0].FileType\n        , ''\n    )\n    , '/'\n    , formatDateTime(pipeline().TriggerTime, 'yyyy-MM-dd-HH-mm')\n    , '_'\n    , activity('Filtered Metadata Row').output.Value[0].FileName\n)\n\n",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Bronze To Silver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n    or( equals(coalesce(activity('Filtered Metadata Row').output.Value[0].GoldNoteBookName, 'null'), 'null')\n        , empty(activity('Filtered Metadata Row').output.Value[0].GoldNoteBookName)\n    )\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Silver To Gold",
									"type": "SynapseNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebook": {
											"referenceName": {
												"value": "@activity('Filtered Metadata Row').output.Value[0].GoldNoteBookName",
												"type": "Expression"
											},
											"type": "NotebookReference"
										},
										"parameters": {
											"StorageAccount": {
												"value": {
													"value": "@activity('Filtered Metadata Row').output.Value[0].StorageAccount",
													"type": "Expression"
												},
												"type": "string"
											},
											"TargetContainer": {
												"value": {
													"value": "@activity('Filtered Metadata Row').output.Value[0].TargetContainer",
													"type": "Expression"
												},
												"type": "string"
											},
											"Path": {
												"value": {
													"value": "@activity('Filtered Metadata Row').output.Value[0].SilverDeltaPath",
													"type": "Expression"
												},
												"type": "string"
											},
											"GoldDeltaPath": {
												"value": {
													"value": "@activity('Filtered Metadata Row').output.Value[0].GoldDeltaPath",
													"type": "Expression"
												},
												"type": "string"
											}
										},
										"snapshot": true,
										"sparkPool": {
											"referenceName": {
												"value": "@activity('Filtered Metadata Row').output.Value[0].SparkPoolName",
												"type": "Expression"
											},
											"type": "BigDataPoolReference"
										},
										"conf": {
											"spark.dynamicAllocation.enabled": null,
											"spark.dynamicAllocation.minExecutors": null,
											"spark.dynamicAllocation.maxExecutors": null
										},
										"numExecutors": null
									}
								}
							]
						}
					},
					{
						"name": "Bronze To Silver",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Switch- Based On Type",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": {
									"value": "@activity('Filtered Metadata Row').output.Value[0].SilverNotebookName",
									"type": "Expression"
								},
								"type": "NotebookReference"
							},
							"parameters": {
								"StorageAccount": {
									"value": {
										"value": "@activity('Filtered Metadata Row').output.Value[0].StorageAccount",
										"type": "Expression"
									},
									"type": "string"
								},
								"TargetContainer": {
									"value": {
										"value": "@activity('Filtered Metadata Row').output.Value[0].TargetContainer",
										"type": "Expression"
									},
									"type": "string"
								},
								"Path": {
									"value": {
										"value": "@concat(activity('Filtered Metadata Row').output.Value[0].BronzeFolder\n    , '/'\n    , activity('Filtered Metadata Row').output.Value[0].Source\n    , '/'\n    , replace(pipeline().parameters.FileName\n        , concat('.', activity('Filtered Metadata Row').output.Value[0].FileType)\n        , ''\n    )\n    , '/'\n    , replace(pipeline().parameters.FileName\n        , activity('Filtered Metadata Row').output.Value[0].FileType\n        , 'parquet'\n    )\n)",
										"type": "Expression"
									},
									"type": "string"
								},
								"SilverDeltaPath": {
									"value": {
										"value": "@activity('Filtered Metadata Row').output.Value[0].SilverDeltaPath",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": {
									"value": "@activity('Filtered Metadata Row').output.Value[0].SparkPoolName",
									"type": "Expression"
								},
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ContainerName": {
						"type": "string",
						"defaultValue": "dropin"
					},
					"Filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "File Ingestion Pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Metadata_DS')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_DropIn_Archieve')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_Csv')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_Parquet')]",
				"[concat(variables('workspaceId'), '/datasets/DS_ADLS_Excel')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GetAllManufacturersApi')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "GetAllManufacturersWriter",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "GetAllManufacturersReader",
								"type": "DatasetReference",
								"parameters": {
									"format": "json"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "GetAllManufacturersJsonWriter",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "GetAllManufacturersA.json",
									"TargetDirName": "A"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-05T21:02:17Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/GetAllManufacturersReader')]",
				"[concat(variables('workspaceId'), '/datasets/GetAllManufacturersJsonWriter')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PL_Test_Read_Metadata')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "JsonLookUp",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json_Metadata",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.Container",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.Directory",
										"type": "Expression"
									},
									"Filename": {
										"value": "@pipeline().parameters.Filename",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "EachRow",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "JsonLookUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('JsonLookUp').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "JustPrintTestBook",
									"type": "SynapseNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebook": {
											"referenceName": "JustPrintTestBook",
											"type": "NotebookReference"
										},
										"parameters": {
											"spark_executor_size": {
												"value": {
													"value": "@item().spark_executor_size",
													"type": "Expression"
												},
												"type": "string"
											},
											"spark_pool_name": {
												"value": {
													"value": "@item().spark_pool_name",
													"type": "Expression"
												},
												"type": "string"
											},
											"container_name": {
												"value": {
													"value": "@item().container_name",
													"type": "Expression"
												},
												"type": "string"
											},
											"storage_account": {
												"value": {
													"value": "@item().storage_account",
													"type": "Expression"
												},
												"type": "string"
											}
										},
										"snapshot": true,
										"sparkPool": {
											"referenceName": {
												"value": "@item().spark_pool_name",
												"type": "Expression"
											},
											"type": "BigDataPoolReference"
										},
										"executorSize": {
											"value": "@item().spark_executor_size",
											"type": "Expression"
										},
										"conf": {
											"spark.dynamicAllocation.enabled": null,
											"spark.dynamicAllocation.minExecutors": null,
											"spark.dynamicAllocation.maxExecutors": null
										},
										"numExecutors": null
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Container": {
						"type": "string",
						"defaultValue": "metadata"
					},
					"Directory": {
						"type": "string"
					},
					"Filename": {
						"type": "string",
						"defaultValue": "Json_Metadata.json"
					}
				},
				"folder": {
					"name": "S3 to ADLS"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Json_Metadata')]",
				"[concat(variables('workspaceId'), '/notebooks/JustPrintTestBook')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PRV-Calling')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PRV-Child",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Set variable fname",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "fname",
							"value": {
								"value": "@activity('Execute Pipeline1').output.pipelineReturnValue.fname",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable lname",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable fname",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lname",
							"value": {
								"value": "@activity('Execute Pipeline1').output.pipelineReturnValue.lname",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SearchOnAnyEngine",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@activity('Execute Pipeline1').output.pipelineReturnValue.searchEngine",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"fname": {
						"type": "String"
					},
					"lname": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-13T17:56:13Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PRV-Child')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PRV-Child')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "FetchApi",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://www.google.com",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "OnFetchSuccess",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "FetchApi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "fname",
									"value": {
										"type": "String",
										"content": "Towhid"
									}
								},
								{
									"key": "lname",
									"value": {
										"type": "String",
										"content": "Islam"
									}
								},
								{
									"key": "searchEngine",
									"value": {
										"type": "String",
										"content": "https://www.bing.com/"
									}
								}
							],
							"setSystemVariable": true
						}
					},
					{
						"name": "OnFetchFailed",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "FetchApi",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "fname",
									"value": {
										"type": "String",
										"content": "not-found"
									}
								},
								{
									"key": "lname",
									"value": {
										"type": "String",
										"content": "not-found"
									}
								},
								{
									"key": "searchEngine",
									"value": {
										"type": "String",
										"content": "https://www.google.com"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"fname": {
						"type": "String"
					},
					"lname": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-13T17:56:11Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Read_ForEach_Metadata_CSV_Source_Data')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CSV_Source_Data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "others"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:12:08Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/CSV_Source_Data')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_task1_test_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MetadataAsAllChildsFromSourceData",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "az_adls_SourceData_Dir",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "FilterOnlyFiles",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "MetadataAsAllChildsFromSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('MetadataAsAllChildsFromSourceData').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@startswith(item().type, 'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachOfFiles",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterOnlyFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterOnlyFiles').output.Value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "az_adls_dynamic_set_SourceData",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"lastModified",
											"size"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Task-1-Tests"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:12:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/az_adls_SourceData_Dir')]",
				"[concat(variables('workspaceId'), '/datasets/az_adls_dynamic_set_SourceData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_task1_test_pipeline10')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MoveToTaskMetadataLookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "MoveToTaskMetadata_Generic",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.MetaFileConainerName",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.MetaFileDirName",
										"type": "Expression"
									},
									"MetaFileName": {
										"value": "@pipeline().parameters.MetaFileName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CheckActionFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "CheckProcessIDFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CheckProcessIDFilter').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().Action, '1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachActiveRowInMetadatafile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "CheckActionFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CheckActionFilter').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "MoveToTaskSourceDirectory_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@item().ContainerName",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@coalesce(item().SourceDir, '*')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(\n    coalesce(item().SourceFile, '*')\n    , '.'\n    , coalesce(item().SourceType, '*')\n)",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists",
											"itemName",
											"itemType"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@startswith(\n    string(activity('Get Metadata1').output.exists)\n    , 'true'\n)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "MoveFilesSourceToTarget",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.00:00:30",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "MoveToTaskSourceDirectory_Generic",
														"type": "DatasetReference",
														"parameters": {
															"ContainerName": {
																"value": "@item().ContainerName",
																"type": "Expression"
															},
															"DirectoryName": {
																"value": "@coalesce(item().SourceDir, '*')",
																"type": "Expression"
															},
															"FileName": {
																"value": "@concat(\n    coalesce(item().SourceFile, '*')\n    , '.'\n    , coalesce(item().SourceType, '*')\n)",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MoveToTaskSourceDirectory_Generic",
														"type": "DatasetReference",
														"parameters": {
															"ContainerName": {
																"value": "@item().TargetContainer",
																"type": "Expression"
															},
															"DirectoryName": {
																"value": "@coalesce(item().TargetDir, '*')",
																"type": "Expression"
															},
															"FileName": {
																"value": "@concat(\n    coalesce(item().TargetFile, '*')\n    , '.'\n    , coalesce(item().TargetType, '*')\n)",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "CheckProcessIDFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "MoveToTaskMetadataLookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('MoveToTaskMetadataLookup').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(\n    equals(pipeline().parameters.ProcessID, null)\n    , equals(item().ProcessID, pipeline().parameters.ProcessID)\n)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MetaFileConainerName": {
						"type": "string",
						"defaultValue": "metainput"
					},
					"MetaFileDirName": {
						"type": "string",
						"defaultValue": null
					},
					"MetaFileName": {
						"type": "string",
						"defaultValue": "MoveToTaskMetadata.csv"
					},
					"ProcessID": {
						"type": "string",
						"defaultValue": null
					}
				},
				"folder": {
					"name": "Task-1-Tests"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:12:37Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MoveToTaskMetadata_Generic')]",
				"[concat(variables('workspaceId'), '/datasets/MoveToTaskSourceDirectory_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_task1_test_pipeline11_a')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "- How to copy all files from one Container/Directory to another place.\n- ProcessID as an instruction to perform a specific task, if null then execute all else just the mentioned one.\n- Refactoring some dataset naming convention.",
				"activities": [
					{
						"name": "MoveToTaskMetadataLookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "MoveToTaskMetadata_Generic",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.MetaFileConainerName",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.MetaFileDirName",
										"type": "Expression"
									},
									"MetaFileName": {
										"value": "@pipeline().parameters.MetaFileName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CheckActionFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "CheckProcessIDFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CheckProcessIDFilter').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().Action, '1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachActiveRowInMetadatafile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "CheckActionFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CheckActionFilter').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "MoveToTaskSourceDirectory_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@item().ContainerName",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@item().SourceDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@if( and(\n        equals(coalesce(item().SourceFile, 'null'), 'null')\n        , equals(coalesce(item().SourceType, 'null'), 'null')\n    )\n    , ''\n    , concat(coalesce(item().SourceFile, '*')\n        , '.'\n        , coalesce(item().SourceType, '*')\n    )\n)",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists",
											"itemName",
											"itemType"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "MoveFilesSourceToTarget",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:00:30",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "MoveToTaskSourceDirectory_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@item().ContainerName",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@item().SourceDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@if( and(\n        equals(coalesce(item().SourceFile, 'null'), 'null')\n        , equals(coalesce(item().SourceType, 'null'), 'null')\n    )\n    , ''\n    , concat(coalesce(item().SourceFile, '*')\n        , '.'\n        , coalesce(item().SourceType, '*')\n    )\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "MoveToTaskSourceDirectory_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@item().TargetContainer",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@coalesce(\n    item().TargetDir\n    , item().SourceDir\n)",
													"type": "Expression"
												},
												"FileName": {
													"value": "@if( and(\n        equals(coalesce(item().TargetFile, 'null'), 'null')\n        , equals(coalesce(item().TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(coalesce(item().TargetFile, '*')\n        , '.'\n        , coalesce(item().TargetType, '*')\n    )\n)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "CheckProcessIDFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "MoveToTaskMetadataLookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('MoveToTaskMetadataLookup').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(\n    equals(pipeline().parameters.ProcessID, null)\n    , equals(item().ProcessID, pipeline().parameters.ProcessID)\n)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MetaFileConainerName": {
						"type": "string",
						"defaultValue": "metainput"
					},
					"MetaFileDirName": {
						"type": "string",
						"defaultValue": null
					},
					"MetaFileName": {
						"type": "string",
						"defaultValue": "MoveToTaskMetadata.csv"
					},
					"ProcessID": {
						"type": "string",
						"defaultValue": null
					}
				},
				"folder": {
					"name": "Task-1-working-prototypes"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:12:47Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MoveToTaskMetadata_Generic')]",
				"[concat(variables('workspaceId'), '/datasets/MoveToTaskSourceDirectory_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_task1_test_pipeline11_b')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "- Pass Target file type to be a specific extension, e.g.  csv to parquet\n- Avoid using GetMetadata inside forloop- in this case",
				"activities": [
					{
						"name": "MoveToTaskMetadataLookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "MoveToTaskMetadata_Generic",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.MetaFileConainerName",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.MetaFileDirName",
										"type": "Expression"
									},
									"MetaFileName": {
										"value": "@pipeline().parameters.MetaFileName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CheckActionFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "CheckProcessIDFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CheckProcessIDFilter').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().Action, '1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachActiveRowInMetadatafile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "CheckActionFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CheckActionFilter').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@toUpper(concat(coalesce(item().SourceType, ''), '_to_', coalesce(item().TargetType, '')))",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "CSV_TO_PARQUET",
												"activities": [
													{
														"name": "ConvertToParquetFormat",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "CSV_Generic",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().ContainerName",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().SourceDir",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@if( and(\n        equals(coalesce(item().SourceFile, 'null'), 'null')\n        , equals(coalesce(item().SourceType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().SourceFile\n        , '.'\n        , item().SourceType\n    )\n)",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "PARQUET_Generic",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().TargetContainer",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().TargetDir",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@if( and(\n        equals(coalesce(item().TargetFile, 'null'), 'null')\n        , equals(coalesce(item().TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().TargetFile\n        , '.'\n        , item().TargetType\n    )\n)",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "MoveFilesSourceToTarget",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.00:00:30",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "MoveToTaskSourceDirectory_Generic",
														"type": "DatasetReference",
														"parameters": {
															"ContainerName": {
																"value": "@item().ContainerName",
																"type": "Expression"
															},
															"DirectoryName": {
																"value": "@item().SourceDir",
																"type": "Expression"
															},
															"FileName": {
																"value": "@if( and(\n        equals(coalesce(item().SourceFile, 'null'), 'null')\n        , equals(coalesce(item().SourceType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().SourceFile\n        , '.'\n        , item().SourceType\n    )\n)",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MoveToTaskSourceDirectory_Generic",
														"type": "DatasetReference",
														"parameters": {
															"ContainerName": {
																"value": "@item().TargetContainer",
																"type": "Expression"
															},
															"DirectoryName": {
																"value": "@coalesce(\n    item().TargetDir\n    , item().SourceDir\n)",
																"type": "Expression"
															},
															"FileName": {
																"value": "@if( and(\n        equals(coalesce(item().TargetFile, 'null'), 'null')\n        , equals(coalesce(item().TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().TargetFile\n        , '.'\n        , item().TargetType\n    )\n)",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "CheckProcessIDFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "MoveToTaskMetadataLookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('MoveToTaskMetadataLookup').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(\n    equals(pipeline().parameters.ProcessID, null)\n    , equals(item().ProcessID, pipeline().parameters.ProcessID)\n)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MetaFileConainerName": {
						"type": "string",
						"defaultValue": "metainput"
					},
					"MetaFileDirName": {
						"type": "string",
						"defaultValue": null
					},
					"MetaFileName": {
						"type": "string",
						"defaultValue": "MoveToTaskMetadata.csv"
					},
					"ProcessID": {
						"type": "string",
						"defaultValue": null
					}
				},
				"folder": {
					"name": "Task-1-working-prototypes"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:12:54Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MoveToTaskMetadata_Generic')]",
				"[concat(variables('workspaceId'), '/datasets/MoveToTaskSourceDirectory_Generic')]",
				"[concat(variables('workspaceId'), '/datasets/CSV_Generic')]",
				"[concat(variables('workspaceId'), '/datasets/PARQUET_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_task1_test_pipeline11_c_archive_activity')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MoveOldFilesToArchive",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "MoveToTaskSourceDirectory_Generic",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": {
										"value": "@pipeline().parameters.TargetContainer",
										"type": "Expression"
									},
									"DirectoryName": {
										"value": "@pipeline().parameters.TargetDir",
										"type": "Expression"
									},
									"FileName": {
										"value": "@if( and(\n        equals(coalesce(pipeline().parameters.TargetFile, 'null'), 'null')\n        , equals(coalesce(pipeline().parameters.TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(pipeline().parameters.TargetFile\n        , '.'\n        , pipeline().parameters.TargetType\n    )\n)",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "MoveToTaskSourceDirectory_Generic",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": {
										"value": "@pipeline().parameters.ArchiveContainer",
										"type": "Expression"
									},
									"DirectoryName": {
										"value": "@concat(\n    formatDateTime(utcnow(), 'yyyyMMdd')\n    , '/'\n    , coalesce(pipeline().parameters.TargetDir, pipeline().parameters.SourceDir)\n    , '_', formatDateTime(utcnow(), 'HHmmss')\n)",
										"type": "Expression"
									},
									"FileName": {
										"value": "@if( and(\n        equals(coalesce(pipeline().parameters.TargetFile, 'null'), 'null')\n        , equals(coalesce(pipeline().parameters.TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(pipeline().parameters.TargetFile\n        , '_'\n        , formatDateTime(utcnow(), 'HHmmss')\n        , '.'\n        , pipeline().parameters.TargetType\n    )\n)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeleteOldFilesAfterArchived",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "MoveOldFilesToArchive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "MoveToTaskSourceDirectory_Generic",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": {
										"value": "@pipeline().parameters.TargetContainer",
										"type": "Expression"
									},
									"DirectoryName": {
										"value": "@pipeline().parameters.TargetDir",
										"type": "Expression"
									},
									"FileName": {
										"value": "@if( and(\n        equals(coalesce(pipeline().parameters.TargetFile, 'null'), 'null')\n        , equals(coalesce(pipeline().parameters.TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(pipeline().parameters.TargetFile\n        , '.'\n        , pipeline().parameters.TargetType\n    )\n)",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ArchiveContainer": {
						"type": "string"
					},
					"TargetContainer": {
						"type": "string"
					},
					"TargetDir": {
						"type": "string"
					},
					"TargetFile": {
						"type": "string"
					},
					"TargetType": {
						"type": "string"
					},
					"SourceDir": {
						"type": "string"
					},
					"ProcessID": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Task-1-Final/main"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:13:11Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MoveToTaskSourceDirectory_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_task1_test_pipeline11_c_copydata_activity')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "SwitchForNew",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@toUpper(concat(coalesce(pipeline().parameters.SourceType, ''), '_to_', coalesce(pipeline().parameters.TargetType, '')))",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "CSV_TO_PARQUET",
									"activities": [
										{
											"name": "ConvertToParquetFormat",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "ParquetSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "ParquetWriteSettings"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "CSV_Generic",
													"type": "DatasetReference",
													"parameters": {
														"Container": {
															"value": "@pipeline().parameters.ContainerName",
															"type": "Expression"
														},
														"Directory": {
															"value": "@pipeline().parameters.SourceDir",
															"type": "Expression"
														},
														"Filename": {
															"value": "@if( and(\n        equals(coalesce(pipeline().parameters.SourceFile, 'null'), 'null')\n        , equals(coalesce(pipeline().parameters.SourceType, 'null'), 'null')\n    )\n    , ''\n    , concat(pipeline().parameters.SourceFile\n        , '.'\n        , pipeline().parameters.SourceType\n    )\n)",
															"type": "Expression"
														}
													}
												}
											],
											"outputs": [
												{
													"referenceName": "PARQUET_Generic",
													"type": "DatasetReference",
													"parameters": {
														"Container": {
															"value": "@pipeline().parameters.TargetContainer",
															"type": "Expression"
														},
														"Directory": {
															"value": "@pipeline().parameters.TargetDir",
															"type": "Expression"
														},
														"Filename": {
															"value": "@if( and(\n        equals(coalesce(pipeline().parameters.TargetFile, 'null'), 'null')\n        , equals(coalesce(pipeline().parameters.TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(coalesce(pipeline().parameters.TargetFile, '*')\n        , '.'\n        , coalesce(pipeline().parameters.TargetType, '*')\n    )\n)",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "MoveNewFilesToTarget",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:00:30",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "MoveToTaskSourceDirectory_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.ContainerName",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@pipeline().parameters.SourceDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@if( and(\n        equals(coalesce(pipeline().parameters.SourceFile, 'null'), 'null')\n        , equals(coalesce(pipeline().parameters.SourceType, 'null'), 'null')\n    )\n    , ''\n    , concat(pipeline().parameters.SourceFile\n        , '.'\n        , pipeline().parameters.SourceType\n    )\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "MoveToTaskSourceDirectory_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.TargetContainer",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@coalesce(\n    pipeline().parameters.TargetDir\n    , pipeline().parameters.SourceDir\n)",
													"type": "Expression"
												},
												"FileName": {
													"value": "@if( and(\n        equals(coalesce(pipeline().parameters.TargetFile, 'null'), 'null')\n        , equals(coalesce(pipeline().parameters.TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(pipeline().parameters.TargetFile\n        , '.'\n        , pipeline().parameters.TargetType\n    )\n)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ProcessID": {
						"type": "string"
					},
					"ContainerName": {
						"type": "string"
					},
					"SourceDir": {
						"type": "string"
					},
					"SourceFile": {
						"type": "string"
					},
					"SourceType": {
						"type": "string"
					},
					"TargetContainer": {
						"type": "string"
					},
					"TargetDir": {
						"type": "string"
					},
					"TargetFile": {
						"type": "string"
					},
					"TargetType": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Task-1-Final/main"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:13:04Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MoveToTaskSourceDirectory_Generic')]",
				"[concat(variables('workspaceId'), '/datasets/CSV_Generic')]",
				"[concat(variables('workspaceId'), '/datasets/PARQUET_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_task1_test_pipeline11_c_v1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "- Instead of replacing the old files, move them to Archive/yyyy-mm-dd/filename_HHmmss ",
				"activities": [
					{
						"name": "MoveToTaskMetadataLookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "MoveToTaskMetadata_Generic",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.MetaFileConainerName",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.MetaFileDirName",
										"type": "Expression"
									},
									"MetaFileName": {
										"value": "@pipeline().parameters.MetaFileName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CheckActionFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "CheckProcessIDFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CheckProcessIDFilter').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().Action, '1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachActiveRowInMetadatafile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "CheckActionFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CheckActionFilter').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "TargetFileMetadataValidation",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@toUpper(concat(coalesce(item().SourceType, ''), '_to_', coalesce(item().TargetType, '')))",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "CSV_TO_PARQUET",
												"activities": [
													{
														"name": "ConvertToParquetFormat",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "CSV_Generic",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().ContainerName",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().SourceDir",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@if( and(\n        equals(coalesce(item().SourceFile, 'null'), 'null')\n        , equals(coalesce(item().SourceType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().SourceFile\n        , '.'\n        , item().SourceType\n    )\n)",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "PARQUET_Generic",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().TargetContainer",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().TargetDir",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@if( and(\n        equals(coalesce(item().TargetFile, 'null'), 'null')\n        , equals(coalesce(item().TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(coalesce(item().TargetFile, '*')\n        , '.'\n        , coalesce(item().TargetType, '*')\n    )\n)",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "MoveFilesSourceToTarget",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.00:00:30",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "MoveToTaskSourceDirectory_Generic",
														"type": "DatasetReference",
														"parameters": {
															"ContainerName": {
																"value": "@item().ContainerName",
																"type": "Expression"
															},
															"DirectoryName": {
																"value": "@item().SourceDir",
																"type": "Expression"
															},
															"FileName": {
																"value": "@if( and(\n        equals(coalesce(item().SourceFile, 'null'), 'null')\n        , equals(coalesce(item().SourceType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().SourceFile\n        , '.'\n        , item().SourceType\n    )\n)",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MoveToTaskSourceDirectory_Generic",
														"type": "DatasetReference",
														"parameters": {
															"ContainerName": {
																"value": "@item().TargetContainer",
																"type": "Expression"
															},
															"DirectoryName": {
																"value": "@coalesce(\n    item().TargetDir\n    , item().SourceDir\n)",
																"type": "Expression"
															},
															"FileName": {
																"value": "@if( and(\n        equals(coalesce(item().TargetFile, 'null'), 'null')\n        , equals(coalesce(item().TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().TargetFile\n        , '.'\n        , item().TargetType\n    )\n)",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "TargetFileMetadataValidation",
									"type": "Validation",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "MoveToTaskSourceDirectory_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@item().TargetContainer",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@item().TargetDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@if( and(\n        equals(coalesce(item().TargetFile, 'null'), 'null')\n        , equals(coalesce(item().TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().TargetFile\n        , '.'\n        , item().TargetType\n    )\n)",
													"type": "Expression"
												}
											}
										},
										"timeout": "0.00:00:07",
										"sleep": 1
									}
								}
							]
						}
					},
					{
						"name": "CheckProcessIDFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "MoveToTaskMetadataLookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('MoveToTaskMetadataLookup').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(\n    equals(pipeline().parameters.ProcessID, null)\n    , equals(item().ProcessID, pipeline().parameters.ProcessID)\n)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MetaFileConainerName": {
						"type": "string",
						"defaultValue": "metainput"
					},
					"MetaFileDirName": {
						"type": "string",
						"defaultValue": null
					},
					"MetaFileName": {
						"type": "string",
						"defaultValue": "MoveToTaskMetadata.csv"
					},
					"ProcessID": {
						"type": "string",
						"defaultValue": null
					},
					"ArchiveContainer": {
						"type": "string",
						"defaultValue": "archive"
					}
				},
				"folder": {
					"name": "Task-1-Final/others"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:12:56Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MoveToTaskMetadata_Generic')]",
				"[concat(variables('workspaceId'), '/datasets/MoveToTaskSourceDirectory_Generic')]",
				"[concat(variables('workspaceId'), '/datasets/CSV_Generic')]",
				"[concat(variables('workspaceId'), '/datasets/PARQUET_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_task1_test_pipeline11_c_v2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "- Instead of replacing the old files, move them to Archive/yyyy-mm-dd/filename_HHmmss ",
				"activities": [
					{
						"name": "MoveToTaskMetadataLookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "MoveToTaskMetadata_Generic",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.MetaFileConainerName",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.MetaFileDirName",
										"type": "Expression"
									},
									"MetaFileName": {
										"value": "@pipeline().parameters.MetaFileName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CheckActionFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "CheckProcessIDFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CheckProcessIDFilter').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().Action, '1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachActiveRowInMetadatafile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "CheckActionFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CheckActionFilter').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SwitchForNew",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "TargetFileMetadataValidation",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@toUpper(concat(coalesce(item().SourceType, ''), '_to_', coalesce(item().TargetType, '')))",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "CSV_TO_PARQUET",
												"activities": [
													{
														"name": "ConvertToParquetFormat",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "CSV_Generic",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().ContainerName",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().SourceDir",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@if( and(\n        equals(coalesce(item().SourceFile, 'null'), 'null')\n        , equals(coalesce(item().SourceType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().SourceFile\n        , '.'\n        , item().SourceType\n    )\n)",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "PARQUET_Generic",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().TargetContainer",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().TargetDir",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@if( and(\n        equals(coalesce(item().TargetFile, 'null'), 'null')\n        , equals(coalesce(item().TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(coalesce(item().TargetFile, '*')\n        , '.'\n        , coalesce(item().TargetType, '*')\n    )\n)",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "MoveNewFilesToTarget",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.00:00:30",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "MoveToTaskSourceDirectory_Generic",
														"type": "DatasetReference",
														"parameters": {
															"ContainerName": {
																"value": "@item().ContainerName",
																"type": "Expression"
															},
															"DirectoryName": {
																"value": "@item().SourceDir",
																"type": "Expression"
															},
															"FileName": {
																"value": "@if( and(\n        equals(coalesce(item().SourceFile, 'null'), 'null')\n        , equals(coalesce(item().SourceType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().SourceFile\n        , '.'\n        , item().SourceType\n    )\n)",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MoveToTaskSourceDirectory_Generic",
														"type": "DatasetReference",
														"parameters": {
															"ContainerName": {
																"value": "@item().TargetContainer",
																"type": "Expression"
															},
															"DirectoryName": {
																"value": "@coalesce(\n    item().TargetDir\n    , item().SourceDir\n)",
																"type": "Expression"
															},
															"FileName": {
																"value": "@if( and(\n        equals(coalesce(item().TargetFile, 'null'), 'null')\n        , equals(coalesce(item().TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().TargetFile\n        , '.'\n        , item().TargetType\n    )\n)",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "TargetFileMetadataValidation",
									"type": "Validation",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "MoveToTaskSourceDirectory_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@item().TargetContainer",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@item().TargetDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@if( and(\n        equals(coalesce(item().TargetFile, 'null'), 'null')\n        , equals(coalesce(item().TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().TargetFile\n        , '.'\n        , item().TargetType\n    )\n)",
													"type": "Expression"
												}
											}
										},
										"timeout": "0.00:00:07",
										"sleep": 1
									}
								},
								{
									"name": "MoveOldFilesToArchive",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "TargetFileMetadataValidation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "MoveToTaskSourceDirectory_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@item().TargetContainer",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@item().TargetDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@if( and(\n        equals(coalesce(item().TargetFile, 'null'), 'null')\n        , equals(coalesce(item().TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().TargetFile\n        , '.'\n        , item().TargetType\n    )\n)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "MoveToTaskSourceDirectory_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.ArchiveContainer",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@concat(\n    formatDateTime(utcnow(), 'yyyyMMdd')\n    , '/'\n    , coalesce(item().TargetDir, item().SourceDir)\n    , '_', formatDateTime(utcnow(), 'HHmmss')\n)",
													"type": "Expression"
												},
												"FileName": {
													"value": "@if( and(\n        equals(coalesce(item().TargetFile, 'null'), 'null')\n        , equals(coalesce(item().TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().TargetFile\n        , '_'\n        , formatDateTime(utcnow(), 'HHmmss')\n        , '.'\n        , item().TargetType\n    )\n)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "DeleteOldFilesAfterArchived",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "MoveOldFilesToArchive",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "MoveToTaskSourceDirectory_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@item().TargetContainer",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@item().TargetDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@if( and(\n        equals(coalesce(item().TargetFile, 'null'), 'null')\n        , equals(coalesce(item().TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().TargetFile\n        , '.'\n        , item().TargetType\n    )\n)",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "SwitchForUpdate",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "DeleteOldFilesAfterArchived",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@toUpper(concat(coalesce(item().SourceType, ''), '_to_', coalesce(item().TargetType, '')))",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "CSV_TO_PARQUET",
												"activities": [
													{
														"name": "UpdateToParquetFormat",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "ParquetSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "ParquetWriteSettings"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "CSV_Generic",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().ContainerName",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().SourceDir",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@if( and(\n        equals(coalesce(item().SourceFile, 'null'), 'null')\n        , equals(coalesce(item().SourceType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().SourceFile\n        , '.'\n        , item().SourceType\n    )\n)",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "PARQUET_Generic",
																"type": "DatasetReference",
																"parameters": {
																	"Container": {
																		"value": "@item().TargetContainer",
																		"type": "Expression"
																	},
																	"Directory": {
																		"value": "@item().TargetDir",
																		"type": "Expression"
																	},
																	"Filename": {
																		"value": "@if( and(\n        equals(coalesce(item().TargetFile, 'null'), 'null')\n        , equals(coalesce(item().TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(coalesce(item().TargetFile, '*')\n        , '.'\n        , coalesce(item().TargetType, '*')\n    )\n)",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "MoveUpdateFilesToTarget",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.00:00:30",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "MoveToTaskSourceDirectory_Generic",
														"type": "DatasetReference",
														"parameters": {
															"ContainerName": {
																"value": "@item().ContainerName",
																"type": "Expression"
															},
															"DirectoryName": {
																"value": "@item().SourceDir",
																"type": "Expression"
															},
															"FileName": {
																"value": "@if( and(\n        equals(coalesce(item().SourceFile, 'null'), 'null')\n        , equals(coalesce(item().SourceType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().SourceFile\n        , '.'\n        , item().SourceType\n    )\n)",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MoveToTaskSourceDirectory_Generic",
														"type": "DatasetReference",
														"parameters": {
															"ContainerName": {
																"value": "@item().TargetContainer",
																"type": "Expression"
															},
															"DirectoryName": {
																"value": "@coalesce(\n    item().TargetDir\n    , item().SourceDir\n)",
																"type": "Expression"
															},
															"FileName": {
																"value": "@if( and(\n        equals(coalesce(item().TargetFile, 'null'), 'null')\n        , equals(coalesce(item().TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().TargetFile\n        , '.'\n        , item().TargetType\n    )\n)",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "CheckProcessIDFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "MoveToTaskMetadataLookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('MoveToTaskMetadataLookup').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(\n    equals(pipeline().parameters.ProcessID, null)\n    , equals(item().ProcessID, pipeline().parameters.ProcessID)\n)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MetaFileConainerName": {
						"type": "string",
						"defaultValue": "metainput"
					},
					"MetaFileDirName": {
						"type": "string",
						"defaultValue": null
					},
					"MetaFileName": {
						"type": "string",
						"defaultValue": "MoveToTaskMetadata.csv"
					},
					"ProcessID": {
						"type": "string",
						"defaultValue": null
					},
					"ArchiveContainer": {
						"type": "string",
						"defaultValue": "archive"
					}
				},
				"folder": {
					"name": "Task-1-Final/others"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:12:59Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MoveToTaskMetadata_Generic')]",
				"[concat(variables('workspaceId'), '/datasets/MoveToTaskSourceDirectory_Generic')]",
				"[concat(variables('workspaceId'), '/datasets/CSV_Generic')]",
				"[concat(variables('workspaceId'), '/datasets/PARQUET_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_task1_test_pipeline11_c_v3')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "- Instead of replacing the old files, move them to Archive/yyyy-mm-dd/filename_HHmmss \n- Using internal pipeline",
				"activities": [
					{
						"name": "MoveToTaskMetadataLookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "MoveToTaskMetadata_Generic",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.MetaFileConainerName",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.MetaFileDirName",
										"type": "Expression"
									},
									"MetaFileName": {
										"value": "@pipeline().parameters.MetaFileName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CheckActionFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "CheckProcessIDFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CheckProcessIDFilter').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().Action, '1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachActiveRowInMetadatafile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "CheckActionFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CheckActionFilter').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "TargetFileMetadataValidation",
									"type": "Validation",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "MoveToTaskSourceDirectory_Generic",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@item().TargetContainer",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@item().TargetDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@if( and(\n        equals(coalesce(item().TargetFile, 'null'), 'null')\n        , equals(coalesce(item().TargetType, 'null'), 'null')\n    )\n    , ''\n    , concat(item().TargetFile\n        , '.'\n        , item().TargetType\n    )\n)",
													"type": "Expression"
												}
											}
										},
										"timeout": "0.00:00:07",
										"sleep": 1
									}
								},
								{
									"name": "ExecuteNewCopyPipeline",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "TargetFileMetadataValidation",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "az_adls_task1_test_pipeline11_c_copydata_activity",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ProcessID": {
												"value": "@item().ProcessID",
												"type": "Expression"
											},
											"ContainerName": {
												"value": "@item().ContainerName",
												"type": "Expression"
											},
											"SourceDir": {
												"value": "@item().SourceDir",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@item().SourceFile",
												"type": "Expression"
											},
											"SourceType": {
												"value": "@item().SourceType",
												"type": "Expression"
											},
											"TargetContainer": {
												"value": "@item().TargetContainer",
												"type": "Expression"
											},
											"TargetDir": {
												"value": "@item().TargetDir",
												"type": "Expression"
											},
											"TargetFile": {
												"value": "@item().TargetFile",
												"type": "Expression"
											},
											"TargetType": {
												"value": "@item().TargetType",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "ExecuteUpdateCopyPipeline",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ExecuteArchivePipeline",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "az_adls_task1_test_pipeline11_c_copydata_activity",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ProcessID": {
												"value": "@item().ProcessID",
												"type": "Expression"
											},
											"ContainerName": {
												"value": "@item().ContainerName",
												"type": "Expression"
											},
											"SourceDir": {
												"value": "@item().SourceDir",
												"type": "Expression"
											},
											"SourceFile": {
												"value": "@item().SourceFile",
												"type": "Expression"
											},
											"SourceType": {
												"value": "@item().SourceType",
												"type": "Expression"
											},
											"TargetContainer": {
												"value": "@item().TargetContainer",
												"type": "Expression"
											},
											"TargetDir": {
												"value": "@item().TargetDir",
												"type": "Expression"
											},
											"TargetFile": {
												"value": "@item().TargetFile",
												"type": "Expression"
											},
											"TargetType": {
												"value": "@item().TargetType",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "ExecuteArchivePipeline",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "TargetFileMetadataValidation",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "az_adls_task1_test_pipeline11_c_archive_activity",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"ArchiveContainer": {
												"value": "@pipeline().parameters.ArchiveContainer",
												"type": "Expression"
											},
											"TargetContainer": {
												"value": "@item().TargetContainer",
												"type": "Expression"
											},
											"TargetDir": {
												"value": "@item().TargetDir",
												"type": "Expression"
											},
											"TargetFile": {
												"value": "@item().TargetFile",
												"type": "Expression"
											},
											"TargetType": {
												"value": "@item().TargetType",
												"type": "Expression"
											},
											"SourceDir": {
												"value": "@item().SourceDir",
												"type": "Expression"
											},
											"ProcessID": {
												"value": "@item().ProcessID",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "CheckProcessIDFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "MoveToTaskMetadataLookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('MoveToTaskMetadataLookup').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(\n    equals(pipeline().parameters.ProcessID, null)\n    , equals(item().ProcessID, pipeline().parameters.ProcessID)\n)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MetaFileConainerName": {
						"type": "string",
						"defaultValue": "metainput"
					},
					"MetaFileDirName": {
						"type": "string",
						"defaultValue": null
					},
					"MetaFileName": {
						"type": "string",
						"defaultValue": "MoveToTaskMetadata.csv"
					},
					"ProcessID": {
						"type": "string",
						"defaultValue": null
					},
					"ArchiveContainer": {
						"type": "string",
						"defaultValue": "archive"
					}
				},
				"folder": {
					"name": "Task-1-Final/main"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:13:16Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MoveToTaskMetadata_Generic')]",
				"[concat(variables('workspaceId'), '/datasets/MoveToTaskSourceDirectory_Generic')]",
				"[concat(variables('workspaceId'), '/pipelines/az_adls_task1_test_pipeline11_c_copydata_activity')]",
				"[concat(variables('workspaceId'), '/pipelines/az_adls_task1_test_pipeline11_c_archive_activity')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_task1_test_pipeline2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "az_adls_Training_Dir",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@startswith(item().type, 'Folder') ",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.Value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "az_adls_dynamic_set_Training_Dir_Only",
											"type": "DatasetReference",
											"parameters": {
												"SubDirName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Filter2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(activity('Filter2').output.Value)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy data1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "az_adls_dynamic_set_Training_Dir",
														"type": "DatasetReference",
														"parameters": {
															"SubDirName": {
																"value": "@activity('Get Metadata2').output.itemName",
																"type": "Expression"
															},
															"FileName": {
																"value": "@first(activity('Filter2').output.Value).name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "az_adls_dynamic_set_Target_Dir",
														"type": "DatasetReference",
														"parameters": {
															"SubDirName": {
																"value": "@activity('Get Metadata2').output.itemName",
																"type": "Expression"
															},
															"FileName": {
																"value": "@first(activity('Filter2').output.Value).name",
																"type": "Expression"
															}
														}
													}
												]
											}
										],
										"ifTrueActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								},
								{
									"name": "Filter2",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "Get Metadata2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('Get Metadata2').output.childItems",
											"type": "Expression"
										},
										"condition": {
											"value": "@startswith(item().type, 'File')",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Task-1-Tests"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:12:14Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/az_adls_Training_Dir')]",
				"[concat(variables('workspaceId'), '/datasets/az_adls_dynamic_set_Training_Dir_Only')]",
				"[concat(variables('workspaceId'), '/datasets/az_adls_dynamic_set_Training_Dir')]",
				"[concat(variables('workspaceId'), '/datasets/az_adls_dynamic_set_Target_Dir')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_task1_test_pipeline3')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata2",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "az_adls_dynamic_set_Training_Dir_Only",
								"type": "DatasetReference",
								"parameters": {
									"SubDirName": {
										"value": "@pipeline().parameters.SubDirName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"itemName"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter2",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata2').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@startswith(item().type, 'File')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter2').output.Value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata3",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "az_adls_dynamic_set_Target_Dir",
											"type": "DatasetReference",
											"parameters": {
												"SubDirName": {
													"value": "@activity('Get Metadata2').output.itemName",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata3",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Get Metadata3').output.exists, 'True')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy data1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "az_adls_dynamic_set_Training_Dir",
														"type": "DatasetReference",
														"parameters": {
															"SubDirName": {
																"value": "@activity('Get Metadata2').output.itemName",
																"type": "Expression"
															},
															"FileName": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "az_adls_dynamic_set_Target_Dir",
														"type": "DatasetReference",
														"parameters": {
															"SubDirName": {
																"value": "@activity('Get Metadata2').output.itemName",
																"type": "Expression"
															},
															"FileName": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													}
												]
											}
										],
										"ifTrueActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SubDirName": {
						"type": "string",
						"defaultValue": "default"
					}
				},
				"folder": {
					"name": "Task-1-Tests"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:12:17Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/az_adls_dynamic_set_Training_Dir_Only')]",
				"[concat(variables('workspaceId'), '/datasets/az_adls_dynamic_set_Target_Dir')]",
				"[concat(variables('workspaceId'), '/datasets/az_adls_dynamic_set_Training_Dir')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_task1_test_pipeline4')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "notebook_task1_test_pipeline4",
								"type": "NotebookReference"
							},
							"parameters": {
								"SubDirName": {
									"value": {
										"value": "@activity('Get Metadata1').output.itemName",
										"type": "Expression"
									},
									"type": "string"
								},
								"SourceFileList": {
									"value": {
										"value": "@string(activity('Filter1').output)",
										"type": "Expression"
									},
									"type": "string"
								},
								"TargetFileType": {
									"value": "parquet",
									"type": "string"
								}
							},
							"snapshot": true,
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": "Small",
							"numExecutors": null
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "az_adls_dynamic_set_Training_Dir_Only",
								"type": "DatasetReference",
								"parameters": {
									"SubDirName": "A"
								}
							},
							"fieldList": [
								"childItems",
								"itemName"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@startswith(item().name, 'File')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Task-1-Tests"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:12:20Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/notebook_task1_test_pipeline4')]",
				"[concat(variables('workspaceId'), '/datasets/az_adls_dynamic_set_Training_Dir_Only')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_task1_test_pipeline5')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MoveFilesTrainingToTarget",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat('Training','/',pipeline().parameters.SourceDirName,'*')",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "@concat('*.', pipeline().parameters.FileType)",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "MoveFromTrainingDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MoveToTargetDataset",
								"type": "DatasetReference",
								"parameters": {
									"TargetDirName": {
										"value": "@pipeline().parameters.TargetDirName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceDirName": {
						"type": "string",
						"defaultValue": "Bronze"
					},
					"FileType": {
						"type": "string",
						"defaultValue": "csv"
					},
					"TargetDirName": {
						"type": "string",
						"defaultValue": "Silver"
					}
				},
				"folder": {
					"name": "Task-1-Tests"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:12:24Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MoveFromTrainingDataset')]",
				"[concat(variables('workspaceId'), '/datasets/MoveToTargetDataset')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_task1_test_pipeline6_wrkng_proto')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MoveFilesTrainingToTarget",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat('Training','/',coalesce(pipeline().parameters.SourceDirName,''),'*')",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "@concat('*.', coalesce(pipeline().parameters.FileType, 'csv'))",
										"type": "Expression"
									},
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "MoveFromTrainingDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MoveToTargetDataset",
								"type": "DatasetReference",
								"parameters": {
									"TargetDirName": {
										"value": "@coalesce(pipeline().parameters.TargetDirName, '')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceDirName": {
						"type": "string",
						"defaultValue": "Bronze"
					},
					"FileType": {
						"type": "string",
						"defaultValue": "csv"
					},
					"TargetDirName": {
						"type": "string",
						"defaultValue": null
					}
				},
				"folder": {
					"name": "Task-1-working-prototypes"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:12:41Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MoveFromTrainingDataset')]",
				"[concat(variables('workspaceId'), '/datasets/MoveToTargetDataset')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_task1_test_pipeline7_wrkng_proto')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MoveToTaskMetadataLookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "MoveToTaskMetadata_Generic",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.MetaFileConainerName",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.MetaFileDirName",
										"type": "Expression"
									},
									"MetaFileName": {
										"value": "@pipeline().parameters.MetaFileName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CheckActionFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "MoveToTaskMetadataLookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('MoveToTaskMetadataLookup').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().Action, '1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachActiveRowInMetadatafile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "CheckActionFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CheckActionFilter').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "MoveFilesFromAnySource",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@item().ContainerName",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@item().SourceDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(item().SourceFile,'.',item().SourceType)",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(\n    startswith(string(activity('Get Metadata1').output.exists), 'true')\n    , equals(item().SourceType, item().TargetType)\n)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "MoveFilesSourceToTarget",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "MoveFilesFromAnySource",
														"type": "DatasetReference",
														"parameters": {
															"ContainerName": {
																"value": "@item().ContainerName",
																"type": "Expression"
															},
															"DirectoryName": {
																"value": "@item().SourceDir",
																"type": "Expression"
															},
															"FileName": {
																"value": "@concat(item().SourceFile, '.', item().SourceType)",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MoveFilesFromAnyTarget",
														"type": "DatasetReference",
														"parameters": {
															"ContainerName": {
																"value": "@item().TargetContainer",
																"type": "Expression"
															},
															"DirectoryName": {
																"value": "@item().TargetDir",
																"type": "Expression"
															},
															"FileName": {
																"value": "@concat(item().TargetFile,'.',item().TargetType)",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MetaFileConainerName": {
						"type": "string",
						"defaultValue": "metainput"
					},
					"MetaFileDirName": {
						"type": "string",
						"defaultValue": null
					},
					"MetaFileName": {
						"type": "string",
						"defaultValue": "MoveToTaskMetadata.csv"
					}
				},
				"folder": {
					"name": "Task-1-working-prototypes"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:12:44Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MoveToTaskMetadata_Generic')]",
				"[concat(variables('workspaceId'), '/datasets/MoveFilesFromAnySource')]",
				"[concat(variables('workspaceId'), '/datasets/MoveFilesFromAnyTarget')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_task1_test_pipeline8')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MoveToTaskMetadataLookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "MoveToTaskMetadata_Generic",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.MetaFileConainerName",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.MetaFileDirName",
										"type": "Expression"
									},
									"MetaFileName": {
										"value": "@pipeline().parameters.MetaFileName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CheckActionFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "MoveToTaskMetadataLookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('MoveToTaskMetadataLookup').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().Action, '1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachActiveRowInMetadatafile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "CheckActionFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CheckActionFilter').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If SourceFile Exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "If TargetFile Exist",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(\n    startswith(string(activity('SourceFileMetadata').output.exists), 'true')\n    , equals(item().SourceType, item().TargetType)\n)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "MoveFilesSourceToTarget",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "MoveFilesFromAnySource",
														"type": "DatasetReference",
														"parameters": {
															"ContainerName": {
																"value": "@item().ContainerName",
																"type": "Expression"
															},
															"DirectoryName": {
																"value": "@item().SourceDir",
																"type": "Expression"
															},
															"FileName": {
																"value": "@concat(item().SourceFile, '.', item().SourceType)",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MoveFilesFromAnyTarget",
														"type": "DatasetReference",
														"parameters": {
															"ContainerName": {
																"value": "@item().TargetContainer",
																"type": "Expression"
															},
															"DirectoryName": {
																"value": "@item().TargetDir",
																"type": "Expression"
															},
															"FileName": {
																"value": "@concat(item().TargetFile,'.',item().TargetType)",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "TargetFileMetadata",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "MoveFilesFromAnyTarget",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@item().TargetContainer",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@item().TargetDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(item().TargetFile, '.', item().TargetType)",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If TargetFile Exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "TargetFileMetadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@startswith(string(activity('TargetFileMetadata').output.exists),'false')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "SourceFileMetadata",
												"type": "GetMetadata",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "MoveFilesFromAnySource",
														"type": "DatasetReference",
														"parameters": {
															"ContainerName": {
																"value": "@item().ContainerName",
																"type": "Expression"
															},
															"DirectoryName": {
																"value": "@item().SourceDir",
																"type": "Expression"
															},
															"FileName": {
																"value": "@concat(item().SourceFile,'.',item().SourceType)",
																"type": "Expression"
															}
														}
													},
													"fieldList": [
														"exists",
														"itemName"
													],
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MetaFileConainerName": {
						"type": "string",
						"defaultValue": "metainput"
					},
					"MetaFileDirName": {
						"type": "string",
						"defaultValue": null
					},
					"MetaFileName": {
						"type": "string",
						"defaultValue": "MoveToTaskMetadata.csv"
					}
				},
				"folder": {
					"name": "Task-1-Tests"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:12:28Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MoveToTaskMetadata_Generic')]",
				"[concat(variables('workspaceId'), '/datasets/MoveFilesFromAnyTarget')]",
				"[concat(variables('workspaceId'), '/datasets/MoveFilesFromAnySource')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_task1_test_pipeline9')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MoveToTaskMetadataLookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "MoveToTaskMetadata_Generic",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.MetaFileConainerName",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.MetaFileDirName",
										"type": "Expression"
									},
									"MetaFileName": {
										"value": "@pipeline().parameters.MetaFileName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CheckActionFilter",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "MoveToTaskMetadataLookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('MoveToTaskMetadataLookup').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().Action, '1')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEachActiveRowInMetadatafile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "CheckActionFilter",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CheckActionFilter').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If SourceFile Exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "GetSourceFileMetadata",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(\n    startswith(string(activity('GetSourceFileMetadata').output.exists), 'true')\n    , equals(item().SourceType, item().TargetType)\n)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "MoveFilesSourceToTarget",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"deleteFilesAfterCompletion": false
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "MoveFilesFromAnySource",
														"type": "DatasetReference",
														"parameters": {
															"ContainerName": {
																"value": "@item().ContainerName",
																"type": "Expression"
															},
															"DirectoryName": {
																"value": "@item().SourceDir",
																"type": "Expression"
															},
															"FileName": {
																"value": "@concat(item().SourceFile, '.', item().SourceType)",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "MoveFilesFromAnyTarget",
														"type": "DatasetReference",
														"parameters": {
															"ContainerName": {
																"value": "@item().TargetContainer",
																"type": "Expression"
															},
															"DirectoryName": {
																"value": "@item().TargetDir",
																"type": "Expression"
															},
															"FileName": {
																"value": "@concat(item().TargetFile,'.',item().TargetType)",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "GetSourceFileMetadata",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "TargetFileMetadataValidation",
											"dependencyConditions": [
												"Failed",
												"Skipped"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "MoveFilesFromAnySource",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@item().ContainerName",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@item().SourceDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(item().SourceFile,'.',item().SourceType)",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "TargetFileMetadataValidation",
									"type": "Validation",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "MoveFilesFromAnyTarget",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@item().TargetContainer",
													"type": "Expression"
												},
												"DirectoryName": {
													"value": "@item().TargetDir",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(item().TargetFile, '.', item().TargetType)",
													"type": "Expression"
												}
											}
										},
										"timeout": "0.00:00:02",
										"sleep": 1
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"MetaFileConainerName": {
						"type": "string",
						"defaultValue": "metainput"
					},
					"MetaFileDirName": {
						"type": "string",
						"defaultValue": null
					},
					"MetaFileName": {
						"type": "string",
						"defaultValue": "MoveToTaskMetadata.csv"
					}
				},
				"folder": {
					"name": "Task-1-Tests"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-15T17:12:30Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MoveToTaskMetadata_Generic')]",
				"[concat(variables('workspaceId'), '/datasets/MoveFilesFromAnySource')]",
				"[concat(variables('workspaceId'), '/datasets/MoveFilesFromAnyTarget')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CSV_Generic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CSV_Source_Data')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Source_Data/CSV_Source_Data",
						"fileSystem": "training"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Csv_Metadata')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure-synapse-practice-pad-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string",
						"defaultValue": "metadata"
					},
					"Directory": {
						"type": "string"
					},
					"Filename": {
						"type": "string",
						"defaultValue": "Csv_Metadata.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/azure-synapse-practice-pad-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_Csv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure-synapse-practice-pad-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					},
					"Delimiter": {
						"type": "string",
						"defaultValue": ","
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().Delimiter",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/azure-synapse-practice-pad-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_DropIn_Archieve')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure-synapse-practice-pad-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/azure-synapse-practice-pad-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_Excel')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure-synapse-practice-pad-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					},
					"SheetIndex": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"sheetIndex": {
						"value": "@dataset().SheetIndex",
						"type": "Expression"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/azure-synapse-practice-pad-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_ADLS_Parquet')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure-synapse-practice-pad-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/azure-synapse-practice-pad-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GetAllManufacturersJsonWriter')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "GetAllManufacturers.json"
					},
					"TargetDirName": {
						"type": "string",
						"defaultValue": null
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('Training','/',coalesce(dataset().TargetDirName,''))",
							"type": "Expression"
						},
						"fileSystem": "training"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GetAllManufacturersReader')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GetAllManufacturersRestService",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"format": {
						"type": "string",
						"defaultValue": "json"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('/api/vehicles/getallmanufacturers?format=',dataset().format)",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/GetAllManufacturersRestService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Json_Metadata')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure-synapse-practice-pad-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string",
						"defaultValue": "metadata"
					},
					"Directory": {
						"type": "string"
					},
					"Filename": {
						"type": "string",
						"defaultValue": "Json_Metadata.json"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/azure-synapse-practice-pad-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Metadata_DS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "azure-synapse-practice-pad-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string",
						"defaultValue": "metadata"
					},
					"Filename": {
						"type": "string",
						"defaultValue": "Metadata_File.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/azure-synapse-practice-pad-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveFilesFromAnySource')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string",
						"defaultValue": "training"
					},
					"DirectoryName": {
						"type": "string",
						"defaultValue": "default"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "sample.csv"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@coalesce(dataset().DirectoryName, '')",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveFilesFromAnyTarget')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string",
						"defaultValue": "training"
					},
					"DirectoryName": {
						"type": "string",
						"defaultValue": "default"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "sample.csv"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@coalesce(dataset().DirectoryName, '')",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveFromTrainingDataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Training",
						"fileSystem": "training"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveToTargetDataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TargetDirName": {
						"type": "string",
						"defaultValue": null
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('Target','/',coalesce(dataset().TargetDirName,''))",
							"type": "Expression"
						},
						"fileSystem": "training"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveToTaskMetadataFile')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "MoveToTaskMetadata.csv",
						"fileSystem": "metainput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"nullValue": "null",
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ContainerName",
						"type": "String"
					},
					{
						"name": "Action",
						"type": "String"
					},
					{
						"name": "SourceDir",
						"type": "String"
					},
					{
						"name": "SourceFile",
						"type": "String"
					},
					{
						"name": "SourceType",
						"type": "String"
					},
					{
						"name": "TargetDir",
						"type": "String"
					},
					{
						"name": "TargetFile",
						"type": "String"
					},
					{
						"name": "TargetType",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveToTaskMetadata_Generic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string",
						"defaultValue": "metainput"
					},
					"Directory": {
						"type": "string",
						"defaultValue": null
					},
					"MetaFileName": {
						"type": "string",
						"defaultValue": "metafile.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().MetaFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@coalesce(dataset().Directory, '')",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"nullValue": "null",
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ContainerName",
						"type": "String"
					},
					{
						"name": "Action",
						"type": "String"
					},
					{
						"name": "SourceDir",
						"type": "String"
					},
					{
						"name": "SourceFile",
						"type": "String"
					},
					{
						"name": "SourceType",
						"type": "String"
					},
					{
						"name": "TargetContainer",
						"type": "String"
					},
					{
						"name": "TargetDir",
						"type": "String"
					},
					{
						"name": "TargetFile",
						"type": "String"
					},
					{
						"name": "TargetType",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveToTaskSourceDirectory_Generic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string",
						"defaultValue": "training"
					},
					"DirectoryName": {
						"type": "string",
						"defaultValue": "default"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "sample.csv"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().DirectoryName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PARQUET_Generic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asa_adls_RenderedData_YellowTrip')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "yellow_tripdata_2023-01.parquet",
						"folderPath": "Rendered_Data",
						"fileSystem": "training"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asa_adls_SourceData_YellowTrip')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string",
						"defaultValue": "training"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "yellow_tripdata_2023-01.parquet",
						"folderPath": "Source_Data",
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "DOUBLE"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "DOUBLE"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "airport_fee",
						"type": "DOUBLE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_SourceData_Dir')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Source_Data",
						"fileSystem": "training"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_Training_Dir')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Training",
						"fileSystem": "training"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_dynamic_set_SourceData')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "placeholder"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "Source_Data",
						"fileSystem": "training"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_dynamic_set_Target_Dir')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SubDirName": {
						"type": "string",
						"defaultValue": "Output"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "sample.txt"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('Target','/',dataset().SubDirName)",
							"type": "Expression"
						},
						"fileSystem": "training"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_dynamic_set_Training_Dir')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SubDirName": {
						"type": "string",
						"defaultValue": "placeholder"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "simple.txt"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('Training', '/', dataset().SubDirName)",
							"type": "Expression"
						},
						"fileSystem": "training"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/az_adls_dynamic_set_Training_Dir_Only')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SubDirName": {
						"type": "string",
						"defaultValue": "default"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('Training', '/', dataset().SubDirName)",
							"type": "Expression"
						},
						"fileSystem": "training"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/asa-practice-we-tw002-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GetAllManufacturersRestService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('GetAllManufacturersRestService_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asa-practice-we-tw002-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('asa-practice-we-tw002-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/asa-practice-we-tw002-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('asa-practice-we-tw002-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/azure-synapse-practice-pad-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('azure-synapse-practice-pad-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/azure-synapse-practice-pad-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('azure-synapse-practice-pad-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Csv_Blob_Create_Event')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "File_Ingestion_Orchestrator",
							"type": "PipelineReference"
						},
						"parameters": {
							"ContainerName": "[parameters('Csv_Blob_Create_Event_properties_File_Ingestion_Orchestrator_parameters_ContainerName')]",
							"Filename": "[parameters('Csv_Blob_Create_Event_properties_File_Ingestion_Orchestrator_parameters_Filename')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/dropin/blobs/",
					"blobPathEndsWith": "csv",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Csv_Blob_Create_Event_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/File_Ingestion_Orchestrator')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Example_Scheduler_Trigger')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_Test_Read_Metadata",
							"type": "PipelineReference"
						},
						"parameters": {
							"Container": "[parameters('Example_Scheduler_Trigger_properties_PL_Test_Read_Metadata_parameters_Container')]",
							"Directory": "[parameters('Example_Scheduler_Trigger_properties_PL_Test_Read_Metadata_parameters_Directory')]",
							"Filename": "[parameters('Example_Scheduler_Trigger_properties_PL_Test_Read_Metadata_parameters_Filename')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-08-22T11:56:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/PL_Test_Read_Metadata')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Excel_Blob_Create_Event')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "File_Ingestion_Orchestrator",
							"type": "PipelineReference"
						},
						"parameters": {
							"ContainerName": "[parameters('Excel_Blob_Create_Event_properties_File_Ingestion_Orchestrator_parameters_ContainerName')]",
							"Filename": "[parameters('Excel_Blob_Create_Event_properties_File_Ingestion_Orchestrator_parameters_Filename')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/dropin/blobs/",
					"blobPathEndsWith": "xlsx",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Excel_Blob_Create_Event_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/File_Ingestion_Orchestrator')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script Read From CSV')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://asapractice01tw002.dfs.core.windows.net/training/Source_Data/StoreDemoGraphics.csv',\n        FORMAT = 'CSV', HEADER_ROW = TRUE,\n        PARSER_VERSION = '2.0'\n    ) AS [result];\n\nSELECT\n    COUNT(*) as [row_count]\n    , MAX(storeId) as [max_id]\nFROM\n    OPENROWSET(\n        BULK 'https://asapractice01tw002.dfs.core.windows.net/training/Source_Data/StoreDemoGraphics.csv',\n        FORMAT = 'CSV', HEADER_ROW = TRUE,\n        PARSER_VERSION = '2.0'\n    ) AS [result];\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script Read From Parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://asapractice01tw002.dfs.core.windows.net/training/Source_Data/yellow_tripdata_2023-01.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Top-10-YallowTripQuery')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (10) [VendorID]\n,[tpep_pickup_datetime]\n,[tpep_dropoff_datetime]\n,[passenger_count]\n,[trip_distance]\n,[RatecodeID]\n,[store_and_fwd_flag]\n,[PULocationID]\n,[DOLocationID]\n,[payment_type]\n,[fare_amount]\n,[extra]\n,[mta_tax]\n,[tip_amount]\n,[tolls_amount]\n,[improvement_surcharge]\n,[total_amount]\n,[congestion_surcharge]\n,[airport_fee]\n FROM [SampleLakeDB].[dbo].[yellow_trip_202301]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SampleLakeDB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BronzeToSilverNotebook')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7704189d-0ddc-481d-b9b6-bab5bccd920b"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql.functions import *"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#StorageAccount = \"dgdnastwedev\"\r\n",
							"#TargetContainer = \"data\"\r\n",
							"#Path = 'Bronze/PDW/PDW_Journal_Database_Codes.parquet'\r\n",
							"#SilverDeltaPath= \"Silver/PDW/PDW_Database_Journal_Codes\"\r\n",
							"ReadPath  = 'abfss://' + TargetContainer + '@' + StorageAccount + '.dfs.core.windows.net/' + Path\r\n",
							"WritePath =  'abfss://' + TargetContainer + '@' + StorageAccount + '.dfs.core.windows.net/' + SilverDeltaPath"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = spark.read.parquet(ReadPath)\r\n",
							"print(df)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Cleansing - Clean unwanted spaces.\r\n",
							"\r\n",
							"for column in df.columns:\r\n",
							"        df = df.withColumn(column, rtrim(ltrim(col(column))))\r\n",
							"\r\n",
							"# Remove any null rows\r\n",
							"df = df.dropna()\r\n",
							"\r\n",
							"# Remove duplicate records if any\r\n",
							"df = df.dropDuplicates()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Write to SilverDeltaPath\r\n",
							"print(WritePath)\r\n",
							"df.write.format('delta').option('overwriteSchema', 'true').mode('overwrite').save(WritePath)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CreateDynamicTrigger')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SPoolWeSmall",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f8cce4d6-7ead-4b05-8e0d-680a5e98ca3f"
					}
				},
				"metadata": {
					"saveOutput": false,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/2883565e-124a-4a7f-a504-d725e5a61b64/resourceGroups/asa_rg_practice_01/providers/Microsoft.Synapse/workspaces/asa-practice-we-tw002/bigDataPools/SPoolWeSmall",
						"name": "SPoolWeSmall",
						"type": "Spark",
						"endpoint": "https://asa-practice-we-tw002.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SPoolWeSmall",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Linking Dependency\r\n",
							"'''\r\n",
							"from azure.identity import ClientSecretCredential \r\n",
							"from azure.mgmt.resource import ResourceManagementClient\r\n",
							"from azure.mgmt.datafactory import DataFactoryManagementClient\r\n",
							"from azure.mgmt.datafactory.models import *\r\n",
							"from datetime import datetime, timedelta\r\n",
							"import time\r\n",
							"'''"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"source": [
							"# Create a trigger\r\n",
							"'''\r\n",
							"    tr_name = 'mytrigger'\r\n",
							"    scheduler_recurrence = ScheduleTriggerRecurrence(frequency='Minute', interval='15',start_time='2017-12-12T04:00:00Z', end_time='2017-12-12T05:00:00Z', time_zone='UTC')\r\n",
							"    pipeline_parameters = {'inputPath':'adftutorial/input', 'outputPath':'adftutorial/output'}\r\n",
							"    pipelines_to_run = []\r\n",
							"    pipeline_reference = PipelineReference('copyPipeline')\r\n",
							"    pipelines_to_run.append(TriggerPipelineReference(pipeline_reference, pipeline_parameters))\r\n",
							"    tr_properties = TriggerResource(properties=ScheduleTrigger(description='My scheduler trigger', pipelines = pipelines_to_run, recurrence=scheduler_recurrence))\r\n",
							"    adf_client.triggers.create_or_update(rg_name, df_name, tr_name, tr_properties)\r\n",
							"\r\n",
							"    # Start the trigger\r\n",
							"    adf_client.triggers.start(rg_name, df_name, tr_name)\r\n",
							"'''\r\n",
							"print(\"Hallo\")"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DeviceCategoryGoldNotebook')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "04bda5ff-5ef6-454a-a7a4-84563e8194b2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql import SparkSession\r\n",
							"from pyspark.sql.functions import *"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#StorageAccount = \"\"\r\n",
							"#TargetContainer = \"\"\r\n",
							"#Path = \"\"\r\n",
							"#GoldDeltaPath= \"\"\r\n",
							"ReadPath  = 'abfss://' + TargetContainer + '@' + StorageAccount + '.dfs.core.windows.net/' + Path\r\n",
							"WritePath  = 'abfss://' + TargetContainer + '@' + StorageAccount + '.dfs.core.windows.net/' + GoldDeltaPath"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"dimDeviceDF = spark.read.format(\"delta\").load(ReadPath)\r\n",
							"print(dimDeviceDF)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# lets replace the device_key with hashing hash(col(('device_name')): \r\n",
							"dimDeviceDF = dimDeviceDF.withColumn('device_key', abs(hash(trim('device_name'))))\r\n",
							"dimDeviceDF = dimDeviceDF.withColumnRenamed('device_name','device')\r\n",
							"\r\n",
							"print(dimDeviceDF)\r\n",
							"dimDeviceDF.show()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# write to Gold path:\r\n",
							"dimDeviceDF.write \\\r\n",
							"            .format(\"delta\") \\\r\n",
							"            .mode(\"overwrite\") \\\r\n",
							"            .option(\"header\", \"true\") \\\r\n",
							"            .option(\"mergeSchema\", \"true\") \\\r\n",
							"            .save(WritePath)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Read for test purpose:\r\n",
							"\"\"\"\r\n",
							"spark.read \\\r\n",
							"    .format(\"delta\") \\\r\n",
							"    .load(WritePath) \\\r\n",
							"    .show()\r\n",
							"\"\"\""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/JustPrintTestBook')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "46ba1c49-a7f5-4185-8347-27dbfac8215c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"#Setting vars:\r\n",
							"#container_name = \"data\"\r\n",
							"#storage_account = \"dgdnastwedev\"\r\n",
							"base_io_path = f\"abfss://{container_name}@{storage_account}.dfs.core.windows.net\"\r\n",
							"print(f\"Base Path: {base_io_path}\")\r\n",
							"print(f\"Execution Complete on {spark_pool_name}:{spark_executor_size}\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook Read From Parquet')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SPoolWeSmall",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c513f73e-45f3-4488-9b3e-85207388045e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"267cb50d-8b22-4395-ab06-5b7abaa6e74b": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "2",
												"1": "2023-01-01 00:32:10",
												"2": "2023-01-01 00:40:36",
												"3": "1.0",
												"4": "0.97",
												"5": "1.0",
												"6": "N",
												"7": "161",
												"8": "141",
												"9": "2",
												"10": "9.3",
												"11": "1.0",
												"12": "0.5",
												"13": "0.0",
												"14": "0.0",
												"15": "1.0",
												"16": "14.3",
												"17": "2.5",
												"18": "0.0"
											},
											{
												"0": "2",
												"1": "2023-01-01 00:55:08",
												"2": "2023-01-01 01:01:27",
												"3": "1.0",
												"4": "1.1",
												"5": "1.0",
												"6": "N",
												"7": "43",
												"8": "237",
												"9": "1",
												"10": "7.9",
												"11": "1.0",
												"12": "0.5",
												"13": "4.0",
												"14": "0.0",
												"15": "1.0",
												"16": "16.9",
												"17": "2.5",
												"18": "0.0"
											},
											{
												"0": "2",
												"1": "2023-01-01 00:25:04",
												"2": "2023-01-01 00:37:49",
												"3": "1.0",
												"4": "2.51",
												"5": "1.0",
												"6": "N",
												"7": "48",
												"8": "238",
												"9": "1",
												"10": "14.9",
												"11": "1.0",
												"12": "0.5",
												"13": "15.0",
												"14": "0.0",
												"15": "1.0",
												"16": "34.9",
												"17": "2.5",
												"18": "0.0"
											},
											{
												"0": "1",
												"1": "2023-01-01 00:03:48",
												"2": "2023-01-01 00:13:25",
												"3": "0.0",
												"4": "1.9",
												"5": "1.0",
												"6": "N",
												"7": "138",
												"8": "7",
												"9": "1",
												"10": "12.1",
												"11": "7.25",
												"12": "0.5",
												"13": "0.0",
												"14": "0.0",
												"15": "1.0",
												"16": "20.85",
												"17": "0.0",
												"18": "1.25"
											},
											{
												"0": "2",
												"1": "2023-01-01 00:10:29",
												"2": "2023-01-01 00:21:19",
												"3": "1.0",
												"4": "1.43",
												"5": "1.0",
												"6": "N",
												"7": "107",
												"8": "79",
												"9": "1",
												"10": "11.4",
												"11": "1.0",
												"12": "0.5",
												"13": "3.28",
												"14": "0.0",
												"15": "1.0",
												"16": "19.68",
												"17": "2.5",
												"18": "0.0"
											},
											{
												"0": "2",
												"1": "2023-01-01 00:50:34",
												"2": "2023-01-01 01:02:52",
												"3": "1.0",
												"4": "1.84",
												"5": "1.0",
												"6": "N",
												"7": "161",
												"8": "137",
												"9": "1",
												"10": "12.8",
												"11": "1.0",
												"12": "0.5",
												"13": "10.0",
												"14": "0.0",
												"15": "1.0",
												"16": "27.8",
												"17": "2.5",
												"18": "0.0"
											},
											{
												"0": "2",
												"1": "2023-01-01 00:09:22",
												"2": "2023-01-01 00:19:49",
												"3": "1.0",
												"4": "1.66",
												"5": "1.0",
												"6": "N",
												"7": "239",
												"8": "143",
												"9": "1",
												"10": "12.1",
												"11": "1.0",
												"12": "0.5",
												"13": "3.42",
												"14": "0.0",
												"15": "1.0",
												"16": "20.52",
												"17": "2.5",
												"18": "0.0"
											},
											{
												"0": "2",
												"1": "2023-01-01 00:27:12",
												"2": "2023-01-01 00:49:56",
												"3": "1.0",
												"4": "11.7",
												"5": "1.0",
												"6": "N",
												"7": "142",
												"8": "200",
												"9": "1",
												"10": "45.7",
												"11": "1.0",
												"12": "0.5",
												"13": "10.74",
												"14": "3.0",
												"15": "1.0",
												"16": "64.44",
												"17": "2.5",
												"18": "0.0"
											},
											{
												"0": "2",
												"1": "2023-01-01 00:21:44",
												"2": "2023-01-01 00:36:40",
												"3": "1.0",
												"4": "2.95",
												"5": "1.0",
												"6": "N",
												"7": "164",
												"8": "236",
												"9": "1",
												"10": "17.7",
												"11": "1.0",
												"12": "0.5",
												"13": "5.68",
												"14": "0.0",
												"15": "1.0",
												"16": "28.38",
												"17": "2.5",
												"18": "0.0"
											},
											{
												"0": "2",
												"1": "2023-01-01 00:39:42",
												"2": "2023-01-01 00:50:36",
												"3": "1.0",
												"4": "3.01",
												"5": "1.0",
												"6": "N",
												"7": "141",
												"8": "107",
												"9": "2",
												"10": "14.9",
												"11": "1.0",
												"12": "0.5",
												"13": "0.0",
												"14": "0.0",
												"15": "1.0",
												"16": "19.9",
												"17": "2.5",
												"18": "0.0"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "VendorID",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "tpep_pickup_datetime",
												"type": "timestamp"
											},
											{
												"key": "2",
												"name": "tpep_dropoff_datetime",
												"type": "timestamp"
											},
											{
												"key": "3",
												"name": "passenger_count",
												"type": "double"
											},
											{
												"key": "4",
												"name": "trip_distance",
												"type": "double"
											},
											{
												"key": "5",
												"name": "RatecodeID",
												"type": "double"
											},
											{
												"key": "6",
												"name": "store_and_fwd_flag",
												"type": "string"
											},
											{
												"key": "7",
												"name": "PULocationID",
												"type": "bigint"
											},
											{
												"key": "8",
												"name": "DOLocationID",
												"type": "bigint"
											},
											{
												"key": "9",
												"name": "payment_type",
												"type": "bigint"
											},
											{
												"key": "10",
												"name": "fare_amount",
												"type": "double"
											},
											{
												"key": "11",
												"name": "extra",
												"type": "double"
											},
											{
												"key": "12",
												"name": "mta_tax",
												"type": "double"
											},
											{
												"key": "13",
												"name": "tip_amount",
												"type": "double"
											},
											{
												"key": "14",
												"name": "tolls_amount",
												"type": "double"
											},
											{
												"key": "15",
												"name": "improvement_surcharge",
												"type": "double"
											},
											{
												"key": "16",
												"name": "total_amount",
												"type": "double"
											},
											{
												"key": "17",
												"name": "congestion_surcharge",
												"type": "double"
											},
											{
												"key": "18",
												"name": "airport_fee",
												"type": "double"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/2883565e-124a-4a7f-a504-d725e5a61b64/resourceGroups/asa_rg_practice_01/providers/Microsoft.Synapse/workspaces/asa-practice-we-tw002/bigDataPools/SPoolWeSmall",
						"name": "SPoolWeSmall",
						"type": "Spark",
						"endpoint": "https://asa-practice-we-tw002.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SPoolWeSmall",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.read.load('abfss://training@asapractice01tw002.dfs.core.windows.net/Source_Data/yellow_tripdata_2023-01.parquet', format='parquet')\r\n",
							"display(df.limit(10))"
						],
						"outputs": [],
						"execution_count": 1
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SilverToGoldNotebook')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "dda2ea2d-54d0-411a-b71d-56d27712e088"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"from pyspark.sql.functions import *"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#StorageAccount = \"dgdnastwedev\"\r\n",
							"#TargetContainer = \"data\"\r\n",
							"#Path = 'Bronze/PDW/PDW_Journal_Database_Codes.parquet'\r\n",
							"#GoldDeltaPath= \"Gold/PDW/PDW_Database_Journal_Codes\"\r\n",
							"ReadPath  = 'abfss://' + TargetContainer + '@' + StorageAccount + '.dfs.core.windows.net/' + Path\r\n",
							"WritePath  = 'abfss://' + TargetContainer + '@' + StorageAccount + '.dfs.core.windows.net/' + GoldDeltaPath"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = spark.read.format(\"delta\").load(ReadPath)\r\n",
							"print(df)"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Write to SilverDeltaPath\r\n",
							"print(WritePath)\r\n",
							"df.write.format('delta').option('overwriteSchema', 'true').mode('overwrite').save(WritePath)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/notebook_task1_test_pipeline4')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SPoolWeSmall",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "60e85933-8446-4d67-a0f9-585544665bf3"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/2883565e-124a-4a7f-a504-d725e5a61b64/resourceGroups/asa_rg_practice_01/providers/Microsoft.Synapse/workspaces/asa-practice-we-tw002/bigDataPools/SPoolWeSmall",
						"name": "SPoolWeSmall",
						"type": "Spark",
						"endpoint": "https://asa-practice-we-tw002.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SPoolWeSmall",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Import MSSPARKUTILS package\r\n",
							"from notebookutils import mssparkutils"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"#Param Names\r\n",
							"SubDirName = \"Not-Set\"\r\n",
							"TargetFileType = \"Not-Set\"\r\n",
							"SourceFileList = \"Not-Set\"\r\n",
							"\r\n",
							"#Test output\r\n",
							"print(\"SubDirName: {}, TargetFileType: {}\".format(SubDirName, TargetFileType))\r\n",
							"print(\"FileList: {}\".format(SourceFileList))\r\n",
							""
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SampleLakeDB')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "SampleLakeDB",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://synapsefs@asapractice01tw002.dfs.core.windows.net/SampleLakeDB",
								"Properties": {
									"FormatType": "parquet",
									"LinkedServiceName": "asa-practice-we-tw002-WorkspaceDefaultStorage"
								}
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 2,
							"ObjectId": "2f1277ed-999d-4f15-905a-cbef96123657"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "yellow_trip_202301",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "SampleLakeDB",
								"DatabaseId": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "VendorID",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "tpep_pickup_datetime",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										}
									},
									{
										"Name": "tpep_dropoff_datetime",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										}
									},
									{
										"Name": "passenger_count",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "trip_distance",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "RatecodeID",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "store_and_fwd_flag",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 8000,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "PULocationID",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "DOLocationID",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "payment_type",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "fare_amount",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "extra",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "mta_tax",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "tip_amount",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "tolls_amount",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "improvement_surcharge",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "total_amount",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "congestion_surcharge",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "airport_fee",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									}
								],
								"ColumnSetEntityName": "60cdb2cc-e55a-4aa5-a068-f9aacc76ae9c",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://training@asapractice01tw002.dfs.core.windows.net/Source_Data/yellow_tripdata_2023-01.parquet",
										"FormatTypeSetToDatabaseDefault": false
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://training@asapractice01tw002.dfs.core.windows.net/Source_Data/yellow_tripdata_2023-01.parquet",
									"Properties": {
										"LinkedServiceName": "asa-practice-we-tw002-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"VendorID\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"tpep_pickup_datetime\",\"type\":\"timestamp\",\"nullable\":true,\"metadata\":{}},{\"name\":\"tpep_dropoff_datetime\",\"type\":\"timestamp\",\"nullable\":true,\"metadata\":{}},{\"name\":\"passenger_count\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"trip_distance\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"RatecodeID\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"store_and_fwd_flag\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"PULocationID\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"DOLocationID\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"payment_type\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"fare_amount\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"extra\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"mta_tax\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"tip_amount\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"tolls_amount\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"improvement_surcharge\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"total_amount\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"congestion_surcharge\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}},{\"name\":\"airport_fee\",\"type\":\"double\",\"nullable\":true,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "68e1bd3e-5fe0-4103-9bfe-14a3eb2ea232",
							"Description": ""
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		}
	]
}