{
	"name": "DeviceCategoryGoldNotebook",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "04bda5ff-5ef6-454a-a7a4-84563e8194b2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import *"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#StorageAccount = \"\"\r\n",
					"#TargetContainer = \"\"\r\n",
					"#Path = \"\"\r\n",
					"#GoldDeltaPath= \"\"\r\n",
					"ReadPath  = 'abfss://' + TargetContainer + '@' + StorageAccount + '.dfs.core.windows.net/' + Path\r\n",
					"WritePath  = 'abfss://' + TargetContainer + '@' + StorageAccount + '.dfs.core.windows.net/' + GoldDeltaPath"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dimDeviceDF = spark.read.format(\"delta\").load(ReadPath)\r\n",
					"print(dimDeviceDF)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# lets replace the device_key with hashing hash(col(('device_name')): \r\n",
					"dimDeviceDF = dimDeviceDF.withColumn('device_key', abs(hash(trim('device_name'))))\r\n",
					"dimDeviceDF = dimDeviceDF.withColumnRenamed('device_name','device')\r\n",
					"\r\n",
					"print(dimDeviceDF)\r\n",
					"dimDeviceDF.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# write to Gold path:\r\n",
					"dimDeviceDF.write \\\r\n",
					"            .format(\"delta\") \\\r\n",
					"            .mode(\"overwrite\") \\\r\n",
					"            .option(\"header\", \"true\") \\\r\n",
					"            .option(\"mergeSchema\", \"true\") \\\r\n",
					"            .save(WritePath)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Read for test purpose:\r\n",
					"\"\"\"\r\n",
					"spark.read \\\r\n",
					"    .format(\"delta\") \\\r\n",
					"    .load(WritePath) \\\r\n",
					"    .show()\r\n",
					"\"\"\""
				],
				"execution_count": null
			}
		]
	}
}